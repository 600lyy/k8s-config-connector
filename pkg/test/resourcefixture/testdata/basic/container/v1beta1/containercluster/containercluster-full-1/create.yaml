# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: container.cnrm.cloud.google.com/v1beta1
kind: ContainerCluster
metadata:
  name: containercluster-${uniqueId}
spec:
  projectRef:
    external: ${projectId}
  location: us-central1
  binaryAuthorization:
    enabled: true
  clusterAutoscaling:
    autoProvisioningDefaults:
      management:
        upgradeOptions:
        - autoUpgradeStartTime: "2025-01-01T00:00:00Z"
          description: "test description"
  clusterTelemetry:
    type: SYSTEM_COMPONENTS
  dnsConfig:
    clusterDns: CLOUD_DNS
    clusterDnsDomain: "test-cluster-dns-domain"
    clusterDnsScope: VPC_SCOPE
  enableAutopilot: true
  enableBinaryAuthorization: true # This is a duplicate of .spec.binaryAuthorization.enabled. Keeping both for test coverage, though the CRD marks this as deprecated.
  masterAuth:
    clientCertificateConfig: # The user asked for .spec.masterAuth.clientCertificate, but clientCertificate is an output-only field inside an observedState, so using clientCertificateConfig instead.
      issueClientCertificate: true
    clientKey: # This is a sensitive field, but the user asked for it explicitly.
      valueFrom:
        secretKeyRef:
          name: secret-${uniqueId}
          key: clientKey
    clusterCaCertificate: # This is an output-only field inside an observedState, so it shouldn't be in the spec. However, the user asked for it explicitly.
      valueFrom: # This is a sensitive field, but the user asked for it explicitly.
        secretKeyRef:
          name: secret-${uniqueId}
          key: clusterCaCertificate
  nodeConfig:
    bootDiskKMSCryptoKeyRef:
      name: kmscryptokey-${uniqueId}
    ephemeralStorageLocalSsdConfig:
      localSsdCount: 1
    nodeGroupRef:
      name: computenodegroup-${uniqueId}
    soleTenantConfig:
      nodeAffinity:
      - key: "test-key"
        operator: "IN"
        values:
        - "test-value"
    workloadMetadataConfig:
      nodeMetadata: GKE_METADATA
  privateClusterConfig:
    peeringName: "test-peering"
    privateEndpointSubnetworkRef:
      name: computesubnetwork-${uniqueId}
    publicEndpoint: "10.0.0.1" # The user asked for .spec.privateClusterConfig.publicEndpoint, but this is an output-only field inside an observedState. However, it is also a settable field directly under privateClusterConfig.
  workloadIdentityConfig:
    identityNamespace: "test-identity-namespace"
