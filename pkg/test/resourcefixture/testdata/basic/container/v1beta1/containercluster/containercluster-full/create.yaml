# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: container.cnrm.cloud.google.com/v1beta1
kind: ContainerCluster
metadata:
  name: containercluster-${uniqueId}
spec:
  projectRef:
    external: ${projectId}
  location: us-central1
  description: "A full ContainerCluster"
  initialNodeCount: 1
  nodeLocations:
  - "us-central1-a"
  - "us-central1-b"
  minMasterVersion: "1.20.0" # Check GKE versions for latest
  nodeVersion: "1.20.0"
  clusterIpv4Cidr: "10.0.0.0/14"
  enableKubernetesAlpha: false
  enableLegacyAbac: false
  enableShieldedNodes: true
  enableTpu: false
  enableIntranodeVisibility: true
  enableL4IlbSubsetting: true
  enableFqdnNetworkPolicy: true
  enableMultiNetworking: false # Requires a supporting CNI
  defaultMaxPodsPerNode: 110
  datapathProvider: "ADVANCED_DATAPATH" # Or "DATAPATH_PROVIDER_UNSPECIFIED"
  privateIpv6GoogleAccess: "PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED" # Other values require specific network setup
  networkingMode: "VPC_NATIVE"
  addonsConfig:
    httpLoadBalancing:
      disabled: false
    horizontalPodAutoscaling:
      disabled: false
    networkPolicyConfig:
      disabled: false # Requires networkPolicy.enabled to be true
    cloudrunConfig:
      disabled: true
      loadBalancerType: "LOAD_BALANCER_TYPE_EXTERNAL"
    dnsCacheConfig:
      enabled: true
    configConnectorConfig:
      enabled: true # Requires Workload Identity
    gcePersistentDiskCsiDriverConfig:
      enabled: true
    gcpFilestoreCsiDriverConfig:
      enabled: true # Requires Filestore API enabled
    gcsFuseCsiDriverConfig:
      enabled: true # Requires GCS API enabled
    gkeBackupAgentConfig:
      enabled: false # Requires Backup for GKE setup
    istioConfig:
      disabled: true
      auth: "AUTH_MUTUAL_TLS"
    kalmConfig:
      enabled: false # KALM is deprecated
  masterAuth:
    clientCertificateConfig:
      issueClientCertificate: false
    username: "admin"
    password:
      valueFrom:
        secretKeyRef:
          name: "secret-${uniqueId}"
          key: "masterAuth.password"
  nodeConfig:
    machineType: "e2-medium"
    diskSizeGb: 100
    diskType: "pd-standard"
    oauthScopes:
    - "https://www.googleapis.com/auth/compute"
    - "https://www.googleapis.com/auth/devstorage.read_only"
    - "https://www.googleapis.com/auth/logging.write"
    - "https://www.googleapis.com/auth/monitoring"
    serviceAccountRef:
      name: "containercluster-${uniqueId}"
    preemptible: false
    spot: false
    imageType: "COS_CONTAINERD"
    minCpuPlatform: "Intel Cascade Lake"
    tags:
    - "foo"
    - "bar"
    guestAccelerator:
    - type: "nvidia-tesla-k80"
      count: 1
      gpuDriverInstallationConfig:
        gpuDriverVersion: "DEFAULT" # or "LATEST"
      gpuSharingConfig:
        maxSharedClientsPerGpu: 1
        gpuSharingStrategy: "TIME_SHARING" # or "MPS"
      gpuPartitionSize: "1g.5gb" # Example, check NVIDIA docs
    shieldedInstanceConfig:
      enableSecureBoot: true
      enableIntegrityMonitoring: true
    kubeletConfig:
      cpuManagerPolicy: "none"
      cpuCfsQuota: true
      cpuCfsQuotaPeriod: "100us"
      podPidsLimit: 4096
    taint:
    - key: "key1"
      value: "value1"
      effect: "NO_SCHEDULE"
    workloadMetadataConfig:
      mode: "GKE_METADATA" # or "GCE_METADATA"
    # nodeMetadata is deprecated, use mode
    sandboxConfig:
      sandboxType: "gvisor"
    reservationAffinity:
      consumeReservationType: "ANY_RESERVATION" # or "NO_RESERVATION", "SPECIFIC_RESERVATION"
      key: "compute.googleapis.com/reservation-name"
      values:
      - "my-reservation"
    localSsdCount: 0 # > 0 requires specific machine types
    ephemeralStorageConfig: # Use either this or ephemeralStorageLocalSsdConfig
      localSsdCount: 0 # > 0 requires specific machine types
    # ephemeralStorageLocalSsdConfig:
    #   localSsdCount: 0 # > 0 requires specific machine types
    localNvmeSsdBlockConfig:
      localSsdCount: 0 # > 0 requires specific machine types
    loggingVariant: "DEFAULT" # or "MAX_THROUGHPUT"
    gcfsConfig:
      enabled: true
    gvnic:
      enabled: true # Requires compatible machine types
    advancedMachineFeatures:
      threadsPerCore: 2 # Or 1 to disable SMT
    # bootDiskKMSCryptoKeyRef: # Requires KMS key
    #   name: "containercluster-${uniqueId}"
    confidentialNodes:
      enabled: false # Requires N2D machine types
    hostMaintenancePolicy:
      maintenanceInterval: "PERIODIC"
    # nodeGroupRef: # Requires a sole-tenant node group
    #   name: "containercluster-${uniqueId}"
    # soleTenantConfig:
    #   nodeAffinity:
    #   - key: "key"
    #     operator: "IN"
    #     values: ["value"]
    fastSocket:
      enabled: true # Requires specific machine types and workloads
  networkPolicy:
    enabled: true
    provider: "CALICO"
  masterAuthorizedNetworksConfig:
    cidrBlocks:
    - displayName: "Office Network"
      cidrBlock: "192.168.1.0/24"
    - displayName: "Home Network"
      cidrBlock: "10.0.1.0/24"
    gcpPublicCidrsAccessEnabled: true
  ipAllocationPolicy:
    clusterSecondaryRangeName: "pods"
    servicesSecondaryRangeName: "services"
    # clusterIpv4CidrBlock: "10.1.0.0/16" # Set to blank for auto, or provide a range
    # servicesIpv4CidrBlock: "10.2.0.0/20" # Set to blank for auto, or provide a range
    stackType: "IPV4" # or "IPV4_IPV6"
    podCidrOverprovisionConfig:
      disabled: false
    additionalPodRangesConfig:
      podRangeNames: ["secondary-pod-range-1", "secondary-pod-range-2"]
  privateClusterConfig:
    enablePrivateNodes: true
    enablePrivateEndpoint: false # If true, publicEndpoint is disabled
    masterIpv4CidrBlock: "172.16.0.32/28"
    # privateEndpointSubnetworkRef: # If specified, master endpoint uses this subnetwork
    #   name: "containercluster-${uniqueId}"
    masterGlobalAccessConfig:
      enabled: true
  releaseChannel:
    channel: "REGULAR" # Or "RAPID", "STABLE", "UNSPECIFIED"
  workloadIdentityConfig:
    # identityNamespace is deprecated, use workloadPool
    workloadPool: "${projectId}.svc.id.goog"
  databaseEncryption:
    state: "ENCRYPTED"
    keyName: "projects/${projectId}/locations/us-central1/keyRings/my-keyring/cryptoKeys/my-key" # Replace with actual key
  verticalPodAutoscaling:
    enabled: true
  authenticatorGroupsConfig:
    securityGroup: "gke-security-groups@example.com" # Replace with your domain
  # binaryAuthorization (deprecated, use the object below)
  binaryAuthorization:
    # enabled: true # deprecated in favor of evaluationMode
    evaluationMode: "PROJECT_SINGLETON_POLICY_ENFORCE" # or "DISABLED"
  clusterAutoscaling:
    enabled: true
    # autoscalingProfile: "BALANCED" # Or "OPTIMIZE_UTILIZATION" - moved under clusterAutoscaling
    resourceLimits:
    - resourceType: "cpu"
      minimum: 1
      maximum: 10
    - resourceType: "memory"
      minimum: 1 #GB
      maximum: 100 #GB
    autoProvisioningDefaults:
      oauthScopes:
      - "https://www.googleapis.com/auth/cloud-platform"
      serviceAccountRef:
        name: "containercluster-${uniqueId}"
      upgradeSettings:
        maxSurge: 1
        maxUnavailable: 0
        strategy: "BLUE_GREEN" # Or "SURGE"
        blueGreenSettings:
          standardRolloutPolicy:
            batchPercentage: 0.2
            batchNodeCount: 1 # Use either percentage or node count
            batchSoakDuration: "1800s" # 30 minutes
          nodePoolSoakDuration: "3600s" # 1 hour
      management:
        autoRepair: true
        autoUpgrade: true
        # upgradeOptions is read-only
      shieldedInstanceConfig:
        enableSecureBoot: true
        enableIntegrityMonitoring: true
      # bootDiskKmsKey is deprecated in favor of bootDiskKmsCryptoKeyRef in GKE API, not directly here
      # bootDiskKMSCryptoKeyRef:
      #   name: "containercluster-${uniqueId}"
      diskSize: 50 #GB
      imageType: "COS_CONTAINERD"
      minCpuPlatform: "Intel Skylake"
  # loggingService: "logging.googleapis.com/kubernetes" # Or "logging.googleapis.com", "none"
  # monitoringService: "monitoring.googleapis.com/kubernetes" # Or "monitoring.googleapis.com", "none"
  # loggingConfig and monitoringConfig are replacements for the above
  loggingConfig:
    enableComponents:
    - "SYSTEM_COMPONENTS"
    - "WORKLOADS"
  monitoringConfig:
    enableComponents:
    - "SYSTEM_COMPONENTS"
    # managedPrometheus: # Requires specific setup
    #  enabled: true
    advancedDatapathObservabilityConfig:
    - enableMetrics: true
      relayMode: "INTERNAL_VPC_LB" # or "EXTERNAL_LB"
  notificationConfig:
    pubsub:
      enabled: true
      topicRef: # Requires Pub/Sub topic
        name: "containercluster-${uniqueId}"
      filter:
        eventType:
        - "UPGRADE_AVAILABLE_EVENT"
        - "SECURITY_BULLETIN_EVENT"
  confidentialNodes:
    enabled: false # Requires N2D machine types
  allowNetAdmin: true
  defaultSnatStatus:
    disabled: false
  enableK8sBetaApis:
    enabledApis:
    - "batch/v1alpha1" # Example API, check for valid beta APIs
  gatewayApiConfig:
    channel: "CHANNEL_STANDARD" # Or "CHANNEL_DISABLED", "CHANNEL_EXPERIMENTAL"
  identityServiceConfig:
    enabled: true # Requires additional setup
  maintenancePolicy:
    dailyMaintenanceWindow:
      startTime: "03:00"
      duration: "4h0m0s" # Example duration in RFC3339
    recurringWindow:
      startTime: "2025-01-01T00:00:00Z"
      endTime: "2025-01-02T00:00:00Z"
      recurrence: "FREQ=WEEKLY;BYDAY=SA"
    maintenanceExclusion:
    - exclusionName: "holiday-blackout"
      startTime: "2025-12-24T00:00:00Z"
      endTime: "2025-12-26T00:00:00Z"
      exclusionOptions:
        scope: "NO_UPGRADES" # Or "NO_MINOR_UPGRADES", "NO_MINOR_OR_NODE_UPGRADES"
  meshCertificates:
    enableCertificates: true # Requires Workload Identity and specific setup
  nodePoolAutoConfig:
    networkTags:
      tags: ["autopilot-nodes", "extra-tag"]
  nodePoolDefaults:
    nodeConfigDefaults:
      loggingVariant: "MAX_THROUGHPUT" # Or "DEFAULT"
      gcfsConfig:
        enabled: true
  podSecurityPolicyConfig: # PodSecurityPolicy is deprecated in K8s 1.21+
    enabled: false # Set to true if using PSPs, ensure policies exist
  protectConfig:
    workloadConfig:
      auditMode: "BASIC" # or "DISABLED"
    workloadVulnerabilityMode: "BASIC" # or "DISABLED"
  resourceUsageExportConfig:
    bigqueryDestination:
      datasetId: "gke_cluster_usage" # Requires BigQuery dataset
    enableNetworkEgressMetering: true
    enableResourceConsumptionMetering: true
  securityPostureConfig:
    mode: "BASIC" # or "DISABLED"
    vulnerabilityMode: "BASIC" # or "DISABLED", "VULNERABILITY_ENTERPRISE"
  serviceExternalIpsConfig:
    enabled: true
  costManagementConfig:
    enabled: true
  # clusterTelemetry.type cannot be set with monitoringConfig/loggingConfig
  # clusterTelemetry:
  #   type: "ENABLED" # Or "DISABLED", "SYSTEM_ONLY"
